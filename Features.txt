new ButtonInfo[] { // Main Mods 
    new ButtonInfo { buttonText = "Join Discord", method = () => Discord(), isTogglable = false, toolTip = "Joins The XTRON Discord" },
    new ButtonInfo { buttonText = "Menu UPD Checker RUN THIS" + Workingtxt, method = () => MenuUPDChecker(), isTogglable = false, toolTip = "" },
    //new ButtonInfo { buttonText = "Enable GUI" + Workingtxt, method = () => DebugText(), disableMethod = () => Disable(), isTogglable = false, toolTip = "" },

    new ButtonInfo { buttonText = "Settings", method = () => SettingsMods.OpenCategory(1, 0), isTogglable = false, toolTip = "Opens the main settings page for the menu.", },
    new ButtonInfo { buttonText = "Basic", method = () => SettingsMods.OpenCategory(2, 0), isTogglable = false, toolTip = "Opens the Room Mods page" },
    new ButtonInfo { buttonText = "Player", method = () => SettingsMods.OpenCategory(3, 0), isTogglable = false, toolTip = "Opens the Room Mods page" },
    new ButtonInfo { buttonText = "Guardian", method = () => SettingsMods.OpenCategory(4, 0), isTogglable = false, toolTip = "Opens the Room Mods page" },
    new ButtonInfo { buttonText = "Visual", method = () => SettingsMods.OpenCategory(5, 0), isTogglable = false, toolTip = "Opens the Room Mods page" },
    new ButtonInfo { buttonText = "Safety", method = () => SettingsMods.OpenCategory(6, 0), isTogglable = false, toolTip = "Opens the Room Mods page" },
    new ButtonInfo { buttonText = "World", method = () => SettingsMods.OpenCategory(7, 0), isTogglable = false, toolTip = "Opens the Room Mods page" },
    new ButtonInfo { buttonText = "Master", method = () => SettingsMods.OpenCategory(8, 0), isTogglable = false, toolTip = "Opens the Room Mods page" },
    new ButtonInfo { buttonText = "Overpowered Mods", method = () => SettingsMods.OpenCategory(9, 0), isTogglable = false, toolTip = "Opens the Room Mods page" },
},

new ButtonInfo[] { // Settings
    new ButtonInfo { buttonText = "Return to Settings", method = () => Global.ReturnHome(), isTogglable = false, toolTip = "Returns to the main settings page for the menu." },
    new ButtonInfo { buttonText = "Right Hand", enableMethod = () => SettingsMods.RightHand(), disableMethod = () => SettingsMods.LeftHand(), toolTip = "Puts the menu on your right hand." },
    new ButtonInfo { buttonText = "Notifications", enableMethod = () => SettingsMods.EnableNotifications(), disableMethod = () => SettingsMods.DisableNotifications(), enabled = !disableNotifications, toolTip = "Toggles the notifications." },
    new ButtonInfo { buttonText = "FPS Counter", enableMethod = () => SettingsMods.EnableFPSCounter(), disableMethod = () => SettingsMods.DisableFPSCounter(), enabled = fpsCounter, toolTip = "Toggles the FPS counter." },
    new ButtonInfo { buttonText = "Disconnect Button", enableMethod = () => SettingsMods.EnableDisconnectButton(), disableMethod = () => SettingsMods.DisableDisconnectButton(), enabled = disconnectButton, toolTip = "Toggles the disconnect button." },
    new ButtonInfo { buttonText = "Disable Outline", method = () => SettingsMods.OutlineDisabler(), disableMethod = () => SettingsMods.OutlineEnabler(), isTogglable = true, toolTip = "Toggles the Main Outline" },
    new ButtonInfo { buttonText = "OutlineV2", method = () => SettingsMods.OutlineV2Enabler(), disableMethod = () => SettingsMods.OutlineV2Disabler(), isTogglable = true, toolTip = "Toggles Another Outline" },
    new ButtonInfo { buttonText = "Font", method = () => SettingsMods.italicFontEnalber(), disableMethod = () => SettingsMods.ItalicFontDisabler(), isTogglable = true, toolTip = "Toggles italic Font" },

},

new ButtonInfo[] { // Basic
    new ButtonInfo { buttonText = "Return to Home", method = () => Global.ReturnHome(), isTogglable = false, toolTip = "Back to home" },
    new ButtonInfo { buttonText = "Disconnect", method = () => LaunchDisconnect(), isTogglable = false, toolTip = "Disconnect from current lobby" },
    new ButtonInfo { buttonText = "Join Random" + Workingtxt, method = () => JoinRandomRoom(), isTogglable = false, toolTip = "Joins Random Public with people" },
    new ButtonInfo { buttonText = "Save Room Code" + Workingtxt, method = () => SaveRoomCode(), isTogglable = false, toolTip = "Saved Room Code!" },
    new ButtonInfo { buttonText = "Join Saved Room Code" + Workingtxt, method = () => JoinSavedRoomCode(), isTogglable = false, toolTip = "Joins Random Public with people" },
    new ButtonInfo { buttonText = "Join Menu Room" + Workingtxt, method = () => PhotonNetworkController.Instance.AttemptToJoinSpecificRoom("<color=blue>" + PluginInfo.Name + "</color>", JoinType.Solo), isTogglable = false, toolTip = "Joins Menu Code " },
    new ButtonInfo { buttonText = "No Name" + Workingtxt, method = () => Name("卍卍"), isTogglable = true, toolTip = "Changes name to ' ' " },
    new ButtonInfo { buttonText = "Menu Name" + Workingtxt, method = () => Name("XTRON ONTOP"), isTogglable = false, toolTip = "XTRON Menu Name" },
    new ButtonInfo { buttonText = "Harmony Name" + Workingtxt, method = () => Name("HARMONY"), isTogglable = false, toolTip = "Harmony Name" },
    new ButtonInfo { buttonText = "TCGMONK Name" + Workingtxt, method = () => Name("TCGMONK"), isTogglable = false, toolTip = "Changes Name to TCGMONK" },
    new ButtonInfo { buttonText = "Uncap Velocity" + Workingtxt, method = () => UncapV(), isTogglable = false, toolTip = "Deletes speed cap" },
    new ButtonInfo { buttonText = "Uncap FPS" + Workingtxt, method = () => UncapFPS(), isTogglable = false, toolTip = "Uncaps max frame limit" },
    new ButtonInfo { buttonText = "Low FPS" + Workingtxt, method = () => LowFPS(), disableMethod = () => FIXLowFPS(), isTogglable = true, toolTip = "Low fps for low end pcs" },
    new ButtonInfo { buttonText = "Restart Gtag" + Workingtxt, method = () => RestartGame("1533390"), isTogglable = true, toolTip = "Restarts Gorilla Tag" },
    new ButtonInfo { buttonText = "Disable Network Triggers" + Workingtxt, method = () => DisableNetworkTriggers(), disableMethod = () => EnableNetworkTriggers(), isTogglable = true, toolTip = "Restarts Gorilla Tag" },
    new ButtonInfo { buttonText = "Disable Map Triggers" + Workingtxt, method = () => DisableMapTriggers(), disableMethod = () => EnableMapTriggers(), isTogglable = true, toolTip = "Restarts Gorilla Tag" },
    new ButtonInfo { buttonText = "FPC" + Workingtxt, method = () => EnableFPC(), isTogglable = false, toolTip = "Restarts Gorilla Tag" },
    new ButtonInfo { buttonText = "Disable FPC" + Workingtxt, method = () => DisableFPC(), isTogglable = false, toolTip = "Restarts Gorilla Tag" },
},
new ButtonInfo[] { // Player
    new ButtonInfo { buttonText = "Return to Home", method = () => Global.ReturnHome(), isTogglable = false, toolTip = "Back to home" },
    new ButtonInfo { buttonText = "Draw Hand Orbs" + Workingtxt, method = () => CreateBallsOnHand(), isTogglable = true, toolTip = "Placeholder" },
    new ButtonInfo { buttonText = "Wasd Fly" + Workingtxt, method = () => WASDManager.WASDV2(), isTogglable = true, toolTip = "Placeholder" },

},
new ButtonInfo[] { // Guardian
    new ButtonInfo { buttonText = "Return to Home", method = () => Global.ReturnHome(), isTogglable = false, toolTip = "Back to home" },
    new ButtonInfo { buttonText = "Anti Grab" + Workingtxt, method = () => AntiGrabMod(), isTogglable = true, toolTip = "Self Explanation" },
    new ButtonInfo { buttonText = "Grab All" + Workingtxt, method = () => GrabAll(), isTogglable = true, toolTip = "Self Explanation" },
    new ButtonInfo { buttonText = "Become Guardian" + Workingtxt, method = () => GetGuardian(), isTogglable = true, toolTip = "Self Explanation" },



},
new ButtonInfo[] { // Visual 
    new ButtonInfo { buttonText = "Return to Home", method = () => Global.ReturnHome(), isTogglable = false, toolTip = "Back to home" },
    new ButtonInfo { buttonText = "Sphere ESP" + Workingtxt, method = () => ESPAll(), isTogglable = true, toolTip = "Self Explanation" },
    new ButtonInfo { buttonText = "Tracers" + Workingtxt, method = () => Tracers(), isTogglable = true, toolTip = "Self Explanation" },
    new ButtonInfo { buttonText = "Chams" + Workingtxt, method = () => Chams(), disableMethod = () => UndoChams(), isTogglable = true, toolTip = "Self Explanation" },

},
new ButtonInfo[] { // Safety
    new ButtonInfo { buttonText = "Return to Home", method = () => Global.ReturnHome(), isTogglable = false, toolTip = "Back to home" },
    new ButtonInfo { buttonText = "Anti Moderator V2 " + Workingtxt, method = () => disconnectOnCosmetic("LBAAK"), isTogglable = true, toolTip = "Self Explanation" },
    new ButtonInfo { buttonText = "Disable Quit Box" + Workingtxt, method = () => DisableQuitBox(), disableMethod = () => EnableQuitBox(), isTogglable = true, toolTip = "Self Explanatory" },
    new ButtonInfo { buttonText = "Anti AFK" + Workingtxt, method = () => EnableAntiAFK(), disableMethod = () => DisableAntiAFK(), isTogglable = true, toolTip = "Self Explanatory" },
},
new ButtonInfo[] { // World
    new ButtonInfo { buttonText = "Return to Home", method = () => Global.ReturnHome(), isTogglable = false, toolTip = "Back to home" },
    new ButtonInfo { buttonText = "Orbit Bug " + Workingtxt, method = () => OrbitDoug(), isTogglable = true, toolTip = "Self Explanation" },
    new ButtonInfo { buttonText = "Orbit Bat" + Workingtxt, method = () => OrbitBat(), isTogglable = true, toolTip = "Self Explanation" },
    new ButtonInfo { buttonText = "Bug Gun" + Workingtxt, method = () => GunLib("Floating Bug Holdable"), isTogglable = true, toolTip = "Back to home" },
    new ButtonInfo { buttonText = "Bat Gun" + Workingtxt, method = () => GunLib("Cave Bat Holdable"), isTogglable = true, toolTip = "Back to home" },
    new ButtonInfo { buttonText = "Accept TOS" + Workingtxt, method = () => AcceptTOS(), disableMethod = () => DisableAcceptTOS(), isTogglable = true, toolTip = "Self Explanation" },
    new ButtonInfo { buttonText = "Spam Blocks" + Workingtxt, method = () => SpamBlock(), isTogglable = true, toolTip = "Self Explanation" },
    new ButtonInfo { buttonText = "Block Gun" + Workingtxt, method = () => Blockgun(), isTogglable = true, toolTip = "Back to home" },
    new ButtonInfo { buttonText = "Rain Trees" + Workingtxt, method = () => _RainBlock(), isTogglable = true, toolTip = "Self Explanation" },
    new ButtonInfo { buttonText = "Halo Blocks" + Workingtxt, method = () => HaloBlocks(), isTogglable = true, toolTip = "Self Explanation" },
    new ButtonInfo { buttonText = "Black Sky" + Workingtxt, method = () => blakSkyMadebyharmony(), isTogglable = true, toolTip = "Self Explanation" },
    new ButtonInfo { buttonText = "Blue Sky" + Workingtxt, method = () => blueSkyMadebyharmony(), isTogglable = true, toolTip = "Self Explanation" },
    new ButtonInfo { buttonText = "red Sky" + Workingtxt, method = () => redSkyMadebyharmony(), isTogglable = true, toolTip = "Self Explanation" },
    new ButtonInfo { buttonText = "Pink Sky" + Workingtxt, method = () => PinkSkyMadebyharmony(), isTogglable = true, toolTip = "Self Explanation" },
    new ButtonInfo { buttonText = "Green Sky" + Workingtxt, method = () => GreenSkyMadebyharmony(), isTogglable = true, toolTip = "Self Explanation" },
    new ButtonInfo { buttonText = "Grey Sky" + Workingtxt, method = () => GreySkyMadebyharmony(), isTogglable = true, toolTip = "Self Explanation" },
    new ButtonInfo { buttonText = "Cyan Sky" + Workingtxt, method = () => CyanSkyMadebyharmony(), isTogglable = true, toolTip = "Self Explanation" },
    new ButtonInfo { buttonText = "White Sky" + Workingtxt, method = () => whiteSkyMadebyharmony(), isTogglable = true, toolTip = "Self Explanation" },
    new ButtonInfo { buttonText = "Yellow Sky" + Workingtxt, method = () => YellowSkyMadebyharmony(), isTogglable = true, toolTip = "Self Explanation" },
},
new ButtonInfo[] { // Master
    new ButtonInfo { buttonText = "Return to Home", method = () => Global.ReturnHome(), isTogglable = false, toolTip = "Back to home" },
    new ButtonInfo { buttonText = "Master Check" + Workingtxt, method = () => MasterCheck(), isTogglable = false },
    new ButtonInfo { buttonText = "Dupe Rig [LEADERBOARD][BUGGY]" + Workingtxt, method = () => DupeRig(), isTogglable = false },
    new ButtonInfo { buttonText = "Destroy Every Block" + Workingtxt, method = () => DestroyBlocks(), isTogglable = false },

},
new ButtonInfo[] { // Overpowered
    new ButtonInfo { buttonText = "Return to Home", method = () => Global.ReturnHome(), isTogglable = false, toolTip = "Back to home" },
    new ButtonInfo { buttonText = "Make Everyone RGB" + Workingtxt, method = () => makeeveryonergb(), isTogglable = true, toolTip = "Self Explanation" },
    new ButtonInfo { buttonText = "Disable All Rig Lerping CANNOT TURN OFF (CRASH)" + Workingtxt, method = () => FreezeAll(), disableMethod = () => StopLagorCrash(), isTogglable = true, toolTip = "Freeze Everyone" },
    new ButtonInfo { buttonText = "Disable All Rig Lerping CANNOT TURN OFF (LAG)" + Workingtxt, method = () => Lag(), disableMethod = () => StopLagorCrash(), isTogglable = true, toolTip = "Lightly Lag Everyone" },
    new ButtonInfo { buttonText = "Grab all ids" + Workingtxt, method = () => GrabAllIDS(), isTogglable = false, toolTip = "Self Explanation" },
    new ButtonInfo { buttonText = "Kick all [REJOIN]" + Workingtxt, method = () => KICKALL(), isTogglable = false, toolTip = "Press 2x" },